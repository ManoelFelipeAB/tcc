# -*- coding: utf-8 -*-
"""TCC.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1t09n9foti6WjxOy89QpcCpJSo1-ccVb8
"""
import os
import pandas as pd
import numpy as np
import datetime
from datetime import timedelta
from datetime import datetime

df = pd.read_excel("C:/Users/agentes/Documents/Projeto HUC/dataset/tcc/log.xlsx")

print(df.columns)

print(df['atividade'].unique())

df_exclui_vazio = df.dropna(axis=1,how='all')
print(df_exclui_vazio.columns)

colunas_para_remover = ['DATA NASCIMENTO', 'PROC. INTERNO', 'ANM PACIENTE', 'ANM Mãe', 'ANM ANESTESISTA', 'ANM CIRURGIAO']
df_extraida = df_exclui_vazio.drop(colunas_para_remover, axis=1)

print(df_extraida.columns)

atividadesS = ['CHAMADA UI', 'SAIDA RPA CC', 'ALTA HOSP', 'SAIDA MORGUE CC', 'DT. INICIO', 'HR. INICIO', 'CHAMADA CC', 'CHEGADA CC', 'ENTRADA SALA', ]
df_remove_atividade = df_extraida.drop(df_extraida.loc[df_extraida['atividade'] == 'DT. AGENDAMENTO' ].index)
for i in atividadesS:
  df_remove_atividade = df_remove_atividade.drop(df_remove_atividade.loc[df_remove_atividade['atividade'] == i ].index)

df_remove_atividade

# dataframes para as atividades: INICIO ANESTESIA, INICIO PROC. CIRURGICO, TERMINO PROC. CIRURGICO, TERMINO ANESTESIA, ENTRADA RPA
df_atividades = df_remove_atividade[:]

df_inicio_anestesia = df_atividades.loc[df_atividades['atividade'] == 'INICIO ANESTESIA' ]
df_inicio_proc_cirurgico = df_atividades.loc[df_atividades['atividade'] == 'INICIO PROC. CIRURGICO' ]
df_termino_proc_cirurgico = df_atividades.loc[df_atividades['atividade'] == 'TERMINO PROC. CIRURGICO' ]
df_termino_anestesia = df_atividades.loc[df_atividades['atividade'] == 'TERMINO ANESTESIA' ]
df_entrada_rpa = df_atividades.loc[df_atividades['atividade'] == 'ENTRADA RPA' ]

# df_inicio_anestesia
# df_inicio_proc_cirurgico
# df_termino_proc_cirurgico
# df_termino_anestesia
# df_entrada_rpa1

df_ini = df_inicio_anestesia[:]
pch = df_ini['Área de atuação'].value_counts()
print(pch)

df_joelho = df_inicio_anestesia.drop(df_inicio_anestesia.loc[df_inicio_anestesia['Área de atuação'] != 'Joelho' ].index)
df_mao = df_inicio_anestesia.drop(df_inicio_anestesia.loc[df_inicio_anestesia['Área de atuação'] != 'Mão' ].index)
df_quadril = df_inicio_anestesia.drop(df_inicio_anestesia.loc[df_inicio_anestesia['Área de atuação'] != 'Quadril' ].index)
df_pe_torn = df_inicio_anestesia.drop(df_inicio_anestesia.loc[df_inicio_anestesia['Área de atuação'] != 'Pé, Tornozelo' ].index)
df_cotovelo_ombro = df_inicio_anestesia.drop(df_inicio_anestesia.loc[df_inicio_anestesia['Área de atuação'] != 'Cotovelo, Ombro' ].index)
df_coluna = df_inicio_anestesia.drop(df_inicio_anestesia.loc[df_inicio_anestesia['Área de atuação'] != 'Coluna' ].index)
df_ombro = df_inicio_anestesia.drop(df_inicio_anestesia.loc[df_inicio_anestesia['Área de atuação'] != 'Ombro' ].index)
df_pe = df_inicio_anestesia.drop(df_inicio_anestesia.loc[df_inicio_anestesia['Área de atuação'] != 'Pé' ].index)
df_geral_joelho = df_inicio_anestesia.drop(df_inicio_anestesia.loc[df_inicio_anestesia['Área de atuação'] != 'Geral, Joelho' ].index)
df_joelho_quadril = df_inicio_anestesia.drop(df_inicio_anestesia.loc[df_inicio_anestesia['Área de atuação'] != 'Joelho, Quadril' ].index)

cirurgias = [df_joelho, df_mao, df_quadril, df_pe_torn, df_cotovelo_ombro, df_coluna, df_ombro, df_pe, df_geral_joelho, df_joelho_quadril]
cirurgiasSTR = ['df_joelho', 'df_mao', 'df_quadril', 'df_pe_torn', 'df_cotovelo_ombro', 'df_coluna', 'df_ombro', 'df_pe', 'df_geral_joelho', 'df_geral_quadril']

cirurgia1 = cirurgiasSTR[:]
for i in cirurgias:
  a = 1
  for j in cirurgia1:
    while a > 0:
      print(j)
      cirurgia1.remove(j)
      a = 0

  print(f"{i['CLASSIFICAÇÃO AGENDA'].value_counts()}\n")

cirurgia2 = cirurgiasSTR[:]
somapch = pch.sum()
cont = 0
for i in pch:
  a = 1
  for j in cirurgia2:
    while a > 0:
      print(j)
      cirurgia2.remove(j)
      a = 0

  valor = pch.iloc[cont]
  porc = (valor/somapch) * 100

  print(f"{porc:.2f}%\n")
  cont += 1

print(somapch)

df_joelho.tail(5)

# Filtrando dataframes para ter os dados referentes a cirurgias de joelho
df_base_joelho = df_joelho[:]

df_inicio_anestesia = df_base_joelho.loc[df_base_joelho['atividade'] == 'INICIO ANESTESIA' ]
df_inicio_proc_cirurgico_extraido = df_inicio_proc_cirurgico.loc[df_inicio_proc_cirurgico['Área de atuação'] == 'Joelho' ]
df_termino_proc_cirurgico_extraido = df_termino_proc_cirurgico.loc[df_termino_proc_cirurgico['Área de atuação'] == 'Joelho' ]
df_termino_anestesia_extraido = df_termino_anestesia.loc[df_termino_anestesia['Área de atuação'] == 'Joelho' ]
df_entrada_rpa_extraido = df_entrada_rpa.loc[df_entrada_rpa['Área de atuação'] == 'Joelho' ]

# df_base_joelho = df_joelho[:]
# df_inicio_anestesia = df_base_joelho.loc[df_base_joelho['atividade'] == 'INICIO ANESTESIA' ]
# df_entrada_rpa = df_remove_atividade.loc[df_remove_atividade['atividade'] == 'ENTRADA RPA']
# df_entrada_rpa = df_entrada_rpa.loc[df_entrada_rpa['Área de atuação'] == 'Joelho' ]
df_tempo_cirurgia = pd.concat([df_inicio_anestesia, df_entrada_rpa])
df_tempo_cirurgia.head(5)

df_inicio_anestesia_tempo = df_joelho[:]
idi = (df_inicio_anestesia_tempo['ATENDIMENTO'].unique())
print(idi)
print("=" * 30)
df_inicio_proc_cirurgico_extraido_temp = df_inicio_proc_cirurgico_extraido[:]
idic = (df_inicio_proc_cirurgico_extraido_temp['ATENDIMENTO'].unique())
print(idic)
print("=" * 30)
df_termino_proc_cirurgico_extraido_temp = df_termino_proc_cirurgico_extraido[:]
idtc = (df_termino_proc_cirurgico_extraido_temp['ATENDIMENTO'].unique())
print(idtc)
print("=" * 30)
df_termino_anestesia_extraido_temp = df_termino_anestesia_extraido[:]
idta = (df_termino_anestesia_extraido_temp['ATENDIMENTO'].unique())
print(idta)
print("=" * 30)
df_entrada_rpa_tempo = df_entrada_rpa_extraido[:]
ide = (df_entrada_rpa_tempo['ATENDIMENTO'].unique())
print(ide)

idi_calc = []
for i in idi:
  idi_calc.append(i)

idic_calc = []
for j in idic:
  idic_calc.append(j)

idtc_calc = []
for k in idtc:
  idtc_calc.append(k)

idta_calc = []
for l in idta:
  idta_calc.append(l)

ide_calc = []
for m in ide:
  ide_calc.append(m)

id_geral = []

# for i in idi_calc:
#   for j in idic_calc:
#     for k in idtc_calc:
#       for l in idta_calc:
#         for m in ide_calc:
#           if i == j and j == k and k == l and l == m:
#             id_geral.append(m)

idi_set = set(idi_calc)
idic_set = set(idic_calc)
idtc_set = set(idtc_calc)
idta_set = set(idta_calc)
ide_set = set(ide_calc)

id_geral = list(idi_set.intersection(idic_set, idtc_set, idta_set, ide_set))

# print(len(idi_calc))
# print(len(idic_calc))
# print(len(idtc_calc))
# print(len(idta_calc))
# print(len(ide_calc))
# print("=")
# print(len(id_geral))
print(f'id_geral: {id_geral}')
copia = id_geral[:]
tamanho = len(copia)
print(tamanho)
print("--" * 60)

inicio_anestesia_ate_inicio_proc_cirurgico = []
inicio_proc_cirurgico_ate_termino_proc_cirurgico = []
termino_proc_cirurgico_ate_termino_anestesia = []
termino_anestesia_ate_entrada_rpa = []
tempo_total_etapas = []

formato = "%Y-%m-%d %H:%M:%S"

for i in range(len(id_geral)):

  df_calc_inicio = df_joelho[:]
  df_calc_inicio_proc_cirurgico = df_inicio_proc_cirurgico_extraido[:]
  df_calc_termino_proc_cirurgico = df_termino_proc_cirurgico_extraido[:]
  df_calc_termino_anestesia = df_termino_anestesia_extraido[:]
  df_calc_entrada = df_entrada_rpa[:]

  a = 1
  #b = 1

  for tempo_i in id_geral:
    while a > 0:
      #print(tempo_i)
      ti = tempo_i
      id_geral.remove(tempo_i)
      a = 0
  # for tempo_f in ide_calc:
  #   while b > 0:
  #     #print(tempo_f)
  #     tf = tempo_f
  #     ide_calc.remove(tempo_f)
  #     b = 0

  df_calc_inicio['timestamp'] = pd.to_datetime(df_calc_inicio['timestamp'] )
  df_calc_inicio_proc_cirurgico['timestamp'] = pd.to_datetime(df_calc_inicio_proc_cirurgico['timestamp'] )
  df_calc_termino_proc_cirurgico['timestamp'] = pd.to_datetime(df_calc_termino_proc_cirurgico['timestamp'] )
  df_calc_termino_anestesia['timestamp'] = pd.to_datetime(df_calc_termino_anestesia['timestamp'] )
  df_calc_entrada['timestamp'] = pd.to_datetime(df_calc_entrada['timestamp'] )


  valor_calc_i_a = df_calc_inicio.loc[df_calc_inicio['ATENDIMENTO'] == ti, 'timestamp']
  valor_cal_i_c = df_calc_inicio_proc_cirurgico.loc[df_calc_inicio_proc_cirurgico['ATENDIMENTO'] == ti, 'timestamp']
  valor_calc_t_c = df_calc_termino_proc_cirurgico.loc[df_calc_termino_proc_cirurgico['ATENDIMENTO'] == ti, 'timestamp']
  valor_calc_t_a = df_calc_termino_anestesia.loc[df_calc_termino_anestesia['ATENDIMENTO'] == ti, 'timestamp']
  valor_calc_e = df_calc_entrada.loc[df_calc_entrada['ATENDIMENTO'] == ti, 'timestamp']

  if len(valor_calc_i_a) > 0:

    vtia = valor_calc_i_a.values[0]
    vtipc = valor_cal_i_c.values[0]
    vttpc = valor_calc_t_c.values[0]
    vtta = valor_calc_t_a.values[0]
    vte = valor_calc_e.values[0]

  # print(vti)
  # print(vtf)
    timestamp1 = pd.to_datetime(vtia)
    saida1 = timestamp1.strftime('%Y-%m-%d %H:%M:%S')
    timestamp_1 = pd.to_datetime(saida1)

    timestamp2 = pd.to_datetime(vtipc)
    saida2 = timestamp2.strftime('%Y-%m-%d %H:%M:%S')
    timestamp_2 = pd.to_datetime(saida2)

    timestamp3 = pd.to_datetime(vttpc)
    saida3 = timestamp3.strftime('%Y-%m-%d %H:%M:%S')
    timestamp_3 = pd.to_datetime(saida3)

    timestamp4 = pd.to_datetime(vtta)
    saida4 = timestamp4.strftime('%Y-%m-%d %H:%M:%S')
    timestamp_4 = pd.to_datetime(saida4)

    timestamp5 = pd.to_datetime(vte)
    saida5 = timestamp5.strftime('%Y-%m-%d %H:%M:%S')
    timestamp_5 = pd.to_datetime(saida5)

    duracao_anestesia_para_cirurgia = timestamp_2 - timestamp_1
    duracao_cirurgia = timestamp_3 - timestamp_2
    duracao_anestesia_pos_cirurgia = timestamp_4 - timestamp_3
    duracao_pos_anestesia_para_entrada_rpa = timestamp_5 - timestamp_4
    duracao_inicio_anestesia_ate_entrada = timestamp_5 - timestamp_1

    inicio_anestesia_ate_inicio_proc_cirurgico.append(duracao_anestesia_para_cirurgia)
    inicio_proc_cirurgico_ate_termino_proc_cirurgico.append(duracao_cirurgia)
    termino_proc_cirurgico_ate_termino_anestesia.append(duracao_anestesia_pos_cirurgia)
    termino_anestesia_ate_entrada_rpa.append(duracao_inicio_anestesia_ate_entrada)
    tempo_total_etapas.append(duracao_inicio_anestesia_ate_entrada)

print(inicio_anestesia_ate_inicio_proc_cirurgico)
print(len(inicio_anestesia_ate_inicio_proc_cirurgico))

print(inicio_proc_cirurgico_ate_termino_proc_cirurgico)
print(len(inicio_proc_cirurgico_ate_termino_proc_cirurgico))

print(termino_proc_cirurgico_ate_termino_anestesia)
print(len(termino_proc_cirurgico_ate_termino_anestesia))

print(termino_anestesia_ate_entrada_rpa)
print(len(termino_anestesia_ate_entrada_rpa))

print(tempo_total_etapas)
print(len(tempo_total_etapas))

tempos_formatados1 = []
tempos_formatados2 = []
tempos_formatados3 = []
tempos_formatados4 = []
tempos_formatados5 = []

#1
for timedelta_obj in inicio_anestesia_ate_inicio_proc_cirurgico:
    dias = timedelta_obj.days
    horas, minutos, segundos = str(timedelta_obj).split(':')

    if dias < 0:
        tempo_formatado = f'-{abs(dias)} {horas}:{minutos}:{segundos}'
    else:
        tempo_formatado = f'{dias} {horas}:{minutos}:{segundos}'

    tempos_formatados1.append(tempo_formatado)

#2
for timedelta_obj in inicio_proc_cirurgico_ate_termino_proc_cirurgico:
    dias = timedelta_obj.days
    horas, minutos, segundos = str(timedelta_obj).split(':')

    if dias < 0:
        tempo_formatado = f'-{abs(dias)} {horas}:{minutos}:{segundos}'
    else:
        tempo_formatado = f'{dias} {horas}:{minutos}:{segundos}'

    tempos_formatados2.append(tempo_formatado)

#3
for timedelta_obj in termino_proc_cirurgico_ate_termino_anestesia:
    dias = timedelta_obj.days
    horas, minutos, segundos = str(timedelta_obj).split(':')

    if dias < 0:
        tempo_formatado = f'-{abs(dias)} {horas}:{minutos}:{segundos}'
    else:
        tempo_formatado = f'{dias} {horas}:{minutos}:{segundos}'

    tempos_formatados3.append(tempo_formatado)

#4
for timedelta_obj in termino_anestesia_ate_entrada_rpa:
    dias = timedelta_obj.days
    horas, minutos, segundos = str(timedelta_obj).split(':')

    if dias < 0:
        tempo_formatado = f'-{abs(dias)} {horas}:{minutos}:{segundos}'
    else:
        tempo_formatado = f'{dias} {horas}:{minutos}:{segundos}'

    tempos_formatados4.append(tempo_formatado)

#5
for timedelta_obj in tempo_total_etapas:
    dias = timedelta_obj.days
    horas, minutos, segundos = str(timedelta_obj).split(':')

    if dias < 0:
        tempo_formatado = f'-{abs(dias)} {horas}:{minutos}:{segundos}'
    else:
        tempo_formatado = f'{dias} {horas}:{minutos}:{segundos}'

    tempos_formatados5.append(tempo_formatado)

print(tempos_formatados1)
print(tempos_formatados2)
print(tempos_formatados3)
print(tempos_formatados4)
print(tempos_formatados5)

horarios1 = []
horarios2 = []
horarios3 = []
horarios4 = []
horarios5 = []

#1
for tempo_str in tempos_formatados1:
    horario = tempo_str.split()[-1]
    horarios1.append(horario)

#2
for tempo_str in tempos_formatados2:
    horario = tempo_str.split()[-1]
    horarios2.append(horario)

#3
for tempo_str in tempos_formatados3:
    horario = tempo_str.split()[-1]
    horarios3.append(horario)

#4
for tempo_str in tempos_formatados4:
    horario = tempo_str.split()[-1]
    horarios4.append(horario)

#5
for tempo_str in tempos_formatados5:
    horario = tempo_str.split()[-1]
    horarios5.append(horario)

print(horarios1)
print(horarios2)
print(horarios3)
print(horarios4)
print(horarios5)

horarios_sem_sinal1 = []
horarios_sem_sinal2 = []
horarios_sem_sinal3 = []
horarios_sem_sinal4 = []
horarios_sem_sinal5 = []

#1
for horario in horarios1:
    horario_sem_sinal = horario.replace('+', '')
    horarios_sem_sinal1.append(horario_sem_sinal)

#2
for horario in horarios2:
    horario_sem_sinal = horario.replace('+', '')
    horarios_sem_sinal2.append(horario_sem_sinal)

#3
for horario in horarios3:
    horario_sem_sinal = horario.replace('+', '')
    horarios_sem_sinal3.append(horario_sem_sinal)

#4
for horario in horarios4:
    horario_sem_sinal = horario.replace('+', '')
    horarios_sem_sinal4.append(horario_sem_sinal)

#5
for horario in horarios5:
    horario_sem_sinal = horario.replace('+', '')
    horarios_sem_sinal5.append(horario_sem_sinal)

print(horarios_sem_sinal1)
print(horarios_sem_sinal2)
print(horarios_sem_sinal3)
print(horarios_sem_sinal4)
print(horarios_sem_sinal5)

# Converter os horários em objetos timedelta
horarios_timedelta1 = [timedelta(hours=int(h.split(':')[0]), minutes=int(h.split(':')[1]), seconds=int(h.split(':')[2])) for h in horarios_sem_sinal1]
horarios_timedelta2 = [timedelta(hours=int(h.split(':')[0]), minutes=int(h.split(':')[1]), seconds=int(h.split(':')[2])) for h in horarios_sem_sinal2]
horarios_timedelta3 = [timedelta(hours=int(h.split(':')[0]), minutes=int(h.split(':')[1]), seconds=int(h.split(':')[2])) for h in horarios_sem_sinal3]
# horarios_timedelta4 = [timedelta(hours=int(h.split(':')[0]), minutes=int(h.split(':')[1]), seconds=int(h.split(':')[2])) for h in horarios4]
horarios_timedelta5 = [timedelta(hours=int(h.split(':')[0]), minutes=int(h.split(':')[1]), seconds=int(h.split(':')[2])) for h in horarios5]
# Calcular a média dos objetos timedelta
media_timedelta = sum(horarios_timedelta5, timedelta()) / len(horarios_timedelta5)

# Converter o resultado da média de volta para o formato de tempo
media_tempo = str(media_timedelta)

print(media_tempo)

print(min(horarios_timedelta5))
print(max(horarios_timedelta5))

# Converter todos os horarios em minutos

# Listas
horarios1_min = []
horarios2_min = []
horarios3_min = []

for horario in horarios_timedelta1:
  horario1 = str(horario)
  tempo_timedelta_base1 = datetime.strptime(horario1, "%H:%M:%S") - datetime.strptime("00:00:00", "%H:%M:%S")
  minutos1_h = tempo_timedelta_base1.total_seconds() / 60
  horarios1_min.append(minutos1_h)

for horario in horarios_timedelta2:
  horario2 = str(horario)
  tempo_timedelta_base2 = datetime.strptime(horario2, "%H:%M:%S") - datetime.strptime("00:00:00", "%H:%M:%S")
  minutos2_h = tempo_timedelta_base2.total_seconds() / 60
  horarios2_min.append(minutos2_h)

for horario in horarios_timedelta3:
  horario3 = str(horario)
  tempo_timedelta_base3 = datetime.strptime(horario3, "%H:%M:%S") - datetime.strptime("00:00:00", "%H:%M:%S")
  minutos3_h = tempo_timedelta_base3.total_seconds() / 60
  horarios3_min.append(minutos3_h)

print(horarios1_min)
print(horarios2_min)
print(horarios3_min)

tempo = "2:05:14.43"
minimo = str(min(horarios_timedelta5))
maximo = str(max(horarios_timedelta5))
# Converter o tempo em um objeto timedelta
tempo_timedelta = datetime.strptime(media_tempo, "%H:%M:%S.%f") - datetime.strptime("00:00:00.00", "%H:%M:%S.%f")
tempo_timedelta2 = datetime.strptime(minimo, "%H:%M:%S") - datetime.strptime("00:00:00", "%H:%M:%S")
tempo_timedelta3 = datetime.strptime(maximo, "%H:%M:%S") - datetime.strptime("00:00:00", "%H:%M:%S")

# Calcular a quantidade de minutos
minutos = tempo_timedelta.total_seconds() / 60
minutos2 = tempo_timedelta2.total_seconds() / 60
minutos3 = tempo_timedelta3.total_seconds() / 60

print(minutos)
print(minutos2)
print(minutos3)

classes = []

# Comparar cada valor com a média
for horario in horarios_timedelta5:
  horario = str(horario)
  tempo_timedelta_base = datetime.strptime(horario, "%H:%M:%S") - datetime.strptime("00:00:00", "%H:%M:%S")
  minutos_h = tempo_timedelta_base.total_seconds() / 60

  if minutos_h < 94.61:
    classes.append("MMEM") # Muito Menor que a média
  elif minutos_h >= 94.61 and minutos_h < 124.61:
    classes.append("MEM") # Menor que a média
  elif minutos_h >= 124.61 and minutos_h < 184.61:
    classes.append("M") # Média
  elif minutos_h >= 184.61 and minutos_h < 214.61:
    classes.append("MAM") # Maior que a média
  else:
    classes.append("MMAM") # Muito Maior que a média

    # if horario > media_timedelta:
    #     print(str(horario) + " é maior que a média.")
    # elif horario < media_timedelta:
    #     print(str(horario) + " é menor que a média.")
    # else:
    #     print(str(horario) + " é igual à média.")

print(classes)

idi_set1 = set(idi_calc)
idic_set1 = set(idic_calc)
idtc_set1 = set(idtc_calc)
idta_set1 = set(idta_calc)
ide_set1 = set(ide_calc)

id_geral222 = list(idi_set1.intersection(idic_set1, idtc_set1, idta_set1, ide_set1))

print(len(id_geral222))

# Filtrar o DataFrame original com base nos valores da lista id_geral
df_teste = df_base_joelho[:]
df_teste.drop_duplicates(subset='ATENDIMENTO', inplace=True)  # Remover valores duplicados
df_filtrado = df_teste[df_teste['ATENDIMENTO'].isin(id_geral222)]

# Exibir o DataFrame filtrado
print(len(df_filtrado))
print(df_filtrado)

df_base_csv = df_filtrado[:]

print(len(df_base_csv))
df_ml = []
datalist = []

for j in id_geral222:
  datalist.append(j)


lista = [str(num) for num in range(1, 3526)]

duracao_anestesia_para_cirurgia_csv = horarios_sem_sinal1[:]
duracao_cirurgia_csv = horarios_sem_sinal2[:]
duracao_anestesia_pos_cirurgia_csv = horarios_sem_sinal3[:]
#duracao_pos_anestesia_para_entrada_rpa_csv = horarios_sem_sinal4[:]
#duracao_inicio_anestesia_ate_entrada_csv = horarios_sem_sinal5[:]

# print(len(duracao_anestesia_para_cirurgia_csv))
# print(len(id_excel))
# print(len(duracao_ciruria_excel))

# print(id_excel)
# print(duracao_ciruria_excel)

# data = {}
data = {'numero_atendimento': datalist, 'CLASSIFICAÇÃO AGENDA': df_base_csv['CLASSIFICAÇÃO AGENDA'],
        'ESPECIALIDADE': df_base_csv['ESPECIALIDADE'], 'Idade': df_base_csv['Idade'],
        'Tipo Atendimento': df_base_csv['Tipo Atendimento'], 'duracao_anestesia_para_cirurgia_': horarios1_min,
        'duracao_cirurgia': horarios2_min, 'duracao_anestesia_pos_cirurgia': horarios3_min,
        'classes': classes}

df_ml = pd.DataFrame(data)
# df_ml['numero_atendimento'] = datalist[:]
# df_ml['CLASSIFICAÇÃO AGENDA'] = df_base_csv['CLASSIFICAÇÃO AGENDA']
# df_ml['ESPECIALIDADE'] = df_base_csv['ESPECIALIDADE']
# df_ml['Idade'] = df_base_csv['Idade']
# df_ml['Tipo Atendimento'] = df_base_csv['Tipo Atendimento']

# df_ml['duracao_anestesia_para_cirurgia_'] = duracao_anestesia_para_cirurgia_csv
# df_ml['duracao_cirurgia'] = duracao_cirurgia_csv
# df_ml['duracao_anestesia_pos_cirurgia'] = duracao_anestesia_pos_cirurgia_csv
# df_ml['duracao_pos_anestesia_para_entrada_rpa'] = duracao_pos_anestesia_para_entrada_rpa_csv
# df_ml['duracao_todas_etapas'] = duracao_inicio_anestesia_ate_entrada_csv

df_ml.head(20)

#nome_arquivo = 'dataset_cirurgia_joelho222.csv'
#df_ml.to_csv(nome_arquivo, index=False)

# Pasta onde você deseja salvar o arquivo CSV
pasta_destino = 'C:/Users/agentes/Documents/Projeto HUC/dataset/tcc/arqs/'

# Verifica se a pasta de destino existe, se não, cria ela
if not os.path.exists(pasta_destino):
    os.makedirs(pasta_destino)

# Caminho completo para o arquivo CSV na pasta de destino
caminho_arquivo_csv = os.path.join(pasta_destino, 'arquivo.csv')

# Convertendo o DataFrame para CSV e salvando na pasta de destino
df_ml.to_csv(caminho_arquivo_csv, index=False)